#pragma once

namespace Ifrit::GraphicsBackend::Rhi {
class RhiBackend;
class RhiContext;
class RhiBuffer;
class RhiTexture;
class RhiSampler;
class RhiShader;
class RhiPipeline;
class RhiCommandBuffer;
class RhiSwapchain;
class RhiDevice;
class RhiMultiBuffer;
class RhiStagedSingleBuffer;

// I don't think the abstraction should be on RHI level
// however, I am too lazy to refactor the whole thing

// Note here 'passes' are in fact 'pipeline references'
// If two pass hold similar pipeline CI, they are the same
class RhiComputePass;
class RhiGraphicsPass;
class RhiPassGraph;

class RhiQueue;
class RhiHostBarrier;
class RhiTaskSubmission;
class RhiGraphicsQueue;
class RhiComputeQueue;
class RhiTransferQueue;

class RhiBindlessDescriptorRef;

class RhiRenderTargets;
struct RhiRenderTargetsFormat;
class RhiColorAttachment;
class RhiDepthStencilAttachment;

class RhiVertexBufferView;

struct RhiImageSubResource;

class RhiDeviceTimer;

// Enums
enum RhiBufferUsage {
  RHI_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,
  RHI_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,
  RHI_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
  RHI_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
  RHI_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,
  RHI_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,
  RHI_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,
  RHI_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,
  RHI_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,
  RHI_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0x00020000,
};

enum RhiImageUsage {
  RHI_IMAGE_USAGE_TRANSFER_SRC_BIT = 1,
  RHI_IMAGE_USAGE_TRANSFER_DST_BIT = 2,
  RHI_IMAGE_USAGE_SAMPLED_BIT = 4,
  RHI_IMAGE_USAGE_STORAGE_BIT = 8,
  RHI_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 16,
  RHI_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 32,
  RHI_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 64,
  RHI_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 128,
};

enum RhiQueueCapability {
  RHI_QUEUE_GRAPHICS_BIT = 0x00000001,
  RHI_QUEUE_COMPUTE_BIT = 0x00000002,
  RHI_QUEUE_TRANSFER_BIT = 0x00000004,
};

enum RhiBlendOp {
  RHI_BLEND_OP_ADD = 0,
  RHI_BLEND_OP_SUBTRACT = 1,
  RHI_BLEND_OP_REVERSE_SUBTRACT = 2,
  RHI_BLEND_OP_MIN = 3,
  RHI_BLEND_OP_MAX = 4,
};

enum RhiBlendFactor {
  RHI_BLEND_FACTOR_ZERO = 0,
  RHI_BLEND_FACTOR_ONE = 1,
  RHI_BLEND_FACTOR_SRC_COLOR = 2,
  RHI_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
  RHI_BLEND_FACTOR_DST_COLOR = 4,
  RHI_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
  RHI_BLEND_FACTOR_SRC_ALPHA = 6,
  RHI_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
  RHI_BLEND_FACTOR_DST_ALPHA = 8,
  RHI_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
  RHI_BLEND_FACTOR_CONSTANT_COLOR = 10,
  RHI_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
  RHI_BLEND_FACTOR_CONSTANT_ALPHA = 12,
  RHI_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
  RHI_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
  RHI_BLEND_FACTOR_SRC1_COLOR = 15,
  RHI_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
  RHI_BLEND_FACTOR_SRC1_ALPHA = 17,
  RHI_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
  RHI_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
};

// These are just mapped from vulkan spec
enum RhiImageFormat {
  RHI_FORMAT_UNDEFINED = 0,
  RHI_FORMAT_R4G4_UNORM_PACK8 = 1,
  RHI_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
  RHI_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
  RHI_FORMAT_R5G6B5_UNORM_PACK16 = 4,
  RHI_FORMAT_B5G6R5_UNORM_PACK16 = 5,
  RHI_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
  RHI_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
  RHI_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
  RHI_FORMAT_R8_UNORM = 9,
  RHI_FORMAT_R8_SNORM = 10,
  RHI_FORMAT_R8_USCALED = 11,
  RHI_FORMAT_R8_SSCALED = 12,
  RHI_FORMAT_R8_UINT = 13,
  RHI_FORMAT_R8_SINT = 14,
  RHI_FORMAT_R8_SRGB = 15,
  RHI_FORMAT_R8G8_UNORM = 16,
  RHI_FORMAT_R8G8_SNORM = 17,
  RHI_FORMAT_R8G8_USCALED = 18,
  RHI_FORMAT_R8G8_SSCALED = 19,
  RHI_FORMAT_R8G8_UINT = 20,
  RHI_FORMAT_R8G8_SINT = 21,
  RHI_FORMAT_R8G8_SRGB = 22,
  RHI_FORMAT_R8G8B8_UNORM = 23,
  RHI_FORMAT_R8G8B8_SNORM = 24,
  RHI_FORMAT_R8G8B8_USCALED = 25,
  RHI_FORMAT_R8G8B8_SSCALED = 26,
  RHI_FORMAT_R8G8B8_UINT = 27,
  RHI_FORMAT_R8G8B8_SINT = 28,
  RHI_FORMAT_R8G8B8_SRGB = 29,
  RHI_FORMAT_B8G8R8_UNORM = 30,
  RHI_FORMAT_B8G8R8_SNORM = 31,
  RHI_FORMAT_B8G8R8_USCALED = 32,
  RHI_FORMAT_B8G8R8_SSCALED = 33,
  RHI_FORMAT_B8G8R8_UINT = 34,
  RHI_FORMAT_B8G8R8_SINT = 35,
  RHI_FORMAT_B8G8R8_SRGB = 36,
  RHI_FORMAT_R8G8B8A8_UNORM = 37,
  RHI_FORMAT_R8G8B8A8_SNORM = 38,
  RHI_FORMAT_R8G8B8A8_USCALED = 39,
  RHI_FORMAT_R8G8B8A8_SSCALED = 40,
  RHI_FORMAT_R8G8B8A8_UINT = 41,
  RHI_FORMAT_R8G8B8A8_SINT = 42,
  RHI_FORMAT_R8G8B8A8_SRGB = 43,
  RHI_FORMAT_B8G8R8A8_UNORM = 44,
  RHI_FORMAT_B8G8R8A8_SNORM = 45,
  RHI_FORMAT_B8G8R8A8_USCALED = 46,
  RHI_FORMAT_B8G8R8A8_SSCALED = 47,
  RHI_FORMAT_B8G8R8A8_UINT = 48,
  RHI_FORMAT_B8G8R8A8_SINT = 49,
  RHI_FORMAT_B8G8R8A8_SRGB = 50,
  RHI_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
  RHI_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
  RHI_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
  RHI_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
  RHI_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
  RHI_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
  RHI_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
  RHI_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
  RHI_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
  RHI_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
  RHI_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
  RHI_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
  RHI_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
  RHI_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
  RHI_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
  RHI_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
  RHI_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
  RHI_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
  RHI_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
  RHI_FORMAT_R16_UNORM = 70,
  RHI_FORMAT_R16_SNORM = 71,
  RHI_FORMAT_R16_USCALED = 72,
  RHI_FORMAT_R16_SSCALED = 73,
  RHI_FORMAT_R16_UINT = 74,
  RHI_FORMAT_R16_SINT = 75,
  RHI_FORMAT_R16_SFLOAT = 76,
  RHI_FORMAT_R16G16_UNORM = 77,
  RHI_FORMAT_R16G16_SNORM = 78,
  RHI_FORMAT_R16G16_USCALED = 79,
  RHI_FORMAT_R16G16_SSCALED = 80,
  RHI_FORMAT_R16G16_UINT = 81,
  RHI_FORMAT_R16G16_SINT = 82,
  RHI_FORMAT_R16G16_SFLOAT = 83,
  RHI_FORMAT_R16G16B16_UNORM = 84,
  RHI_FORMAT_R16G16B16_SNORM = 85,
  RHI_FORMAT_R16G16B16_USCALED = 86,
  RHI_FORMAT_R16G16B16_SSCALED = 87,
  RHI_FORMAT_R16G16B16_UINT = 88,
  RHI_FORMAT_R16G16B16_SINT = 89,
  RHI_FORMAT_R16G16B16_SFLOAT = 90,
  RHI_FORMAT_R16G16B16A16_UNORM = 91,
  RHI_FORMAT_R16G16B16A16_SNORM = 92,
  RHI_FORMAT_R16G16B16A16_USCALED = 93,
  RHI_FORMAT_R16G16B16A16_SSCALED = 94,
  RHI_FORMAT_R16G16B16A16_UINT = 95,
  RHI_FORMAT_R16G16B16A16_SINT = 96,
  RHI_FORMAT_R16G16B16A16_SFLOAT = 97,
  RHI_FORMAT_R32_UINT = 98,
  RHI_FORMAT_R32_SINT = 99,
  RHI_FORMAT_R32_SFLOAT = 100,
  RHI_FORMAT_R32G32_UINT = 101,
  RHI_FORMAT_R32G32_SINT = 102,
  RHI_FORMAT_R32G32_SFLOAT = 103,
  RHI_FORMAT_R32G32B32_UINT = 104,
  RHI_FORMAT_R32G32B32_SINT = 105,
  RHI_FORMAT_R32G32B32_SFLOAT = 106,
  RHI_FORMAT_R32G32B32A32_UINT = 107,
  RHI_FORMAT_R32G32B32A32_SINT = 108,
  RHI_FORMAT_R32G32B32A32_SFLOAT = 109,
  RHI_FORMAT_R64_UINT = 110,
  RHI_FORMAT_R64_SINT = 111,
  RHI_FORMAT_R64_SFLOAT = 112,
  RHI_FORMAT_R64G64_UINT = 113,
  RHI_FORMAT_R64G64_SINT = 114,
  RHI_FORMAT_R64G64_SFLOAT = 115,
  RHI_FORMAT_R64G64B64_UINT = 116,
  RHI_FORMAT_R64G64B64_SINT = 117,
  RHI_FORMAT_R64G64B64_SFLOAT = 118,
  RHI_FORMAT_R64G64B64A64_UINT = 119,
  RHI_FORMAT_R64G64B64A64_SINT = 120,
  RHI_FORMAT_R64G64B64A64_SFLOAT = 121,
  RHI_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
  RHI_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
  RHI_FORMAT_D16_UNORM = 124,
  RHI_FORMAT_X8_D24_UNORM_PACK32 = 125,
  RHI_FORMAT_D32_SFLOAT = 126,
  RHI_FORMAT_S8_UINT = 127,
  RHI_FORMAT_D16_UNORM_S8_UINT = 128,
  RHI_FORMAT_D24_UNORM_S8_UINT = 129,
  RHI_FORMAT_D32_SFLOAT_S8_UINT = 130,
  RHI_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
  RHI_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
  RHI_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
  RHI_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
  RHI_FORMAT_BC2_UNORM_BLOCK = 135,
  RHI_FORMAT_BC2_SRGB_BLOCK = 136,
  RHI_FORMAT_BC3_UNORM_BLOCK = 137,
  RHI_FORMAT_BC3_SRGB_BLOCK = 138,
  RHI_FORMAT_BC4_UNORM_BLOCK = 139,
  RHI_FORMAT_BC4_SNORM_BLOCK = 140,
  RHI_FORMAT_BC5_UNORM_BLOCK = 141,
  RHI_FORMAT_BC5_SNORM_BLOCK = 142,
  RHI_FORMAT_BC6H_UFLOAT_BLOCK = 143,
  RHI_FORMAT_BC6H_SFLOAT_BLOCK = 144,
  RHI_FORMAT_BC7_UNORM_BLOCK = 145,
  RHI_FORMAT_BC7_SRGB_BLOCK = 146,
  RHI_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
  RHI_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
  RHI_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
  RHI_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
  RHI_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
  RHI_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
  RHI_FORMAT_EAC_R11_UNORM_BLOCK = 153,
  RHI_FORMAT_EAC_R11_SNORM_BLOCK = 154,
  RHI_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
  RHI_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
  RHI_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
  RHI_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
  RHI_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
  RHI_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
  RHI_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
  RHI_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
  RHI_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
  RHI_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
  RHI_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
  RHI_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
  RHI_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
  RHI_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
  RHI_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
  RHI_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
  RHI_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
  RHI_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
  RHI_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
  RHI_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
  RHI_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
  RHI_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
  RHI_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
  RHI_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
  RHI_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
  RHI_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
  RHI_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
  RHI_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
  RHI_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
  RHI_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
};

enum class RhiShaderStage { Vertex, Fragment, Compute, Mesh, Task };
enum class RhiShaderSourceType { GLSLCode, Binary };
enum class RhiVertexInputRate { Vertex, Instance };

enum class RhiDescriptorBindPoint { Compute, Graphics };

enum class RhiDescriptorType {
  UniformBuffer,
  StorageBuffer,
  CombinedImageSampler,
  StorageImage,
  MaxEnum
};

enum class RhiResourceAccessType {
  Read,
  Write,
  ReadOrWrite,
  ReadAndWrite,
};

enum class RhiRenderTargetLoadOp { Load, Clear, DontCare };
enum class RhiCullMode { None, Front, Back };
enum class RhiRasterizerTopology { TriangleList, Line, Point };
enum class RhiGeometryGenerationType { Conventional, Mesh };

enum class RhiResourceType { Buffer, Texture };
enum class RhiCompareOp {
  Never,
  Less,
  Equal,
  LessOrEqual,
  Greater,
  NotEqual,
  GreaterOrEqual,
  Always
};

enum class RhiResourceState {
  Undefined,
  Common,
  RenderTarget,
  DepthStencilRenderTarget,
  Present,
  UAVStorageImage,
  CopySource,
  CopyDest,
  UnorderedAccess,
  PixelShaderResource,
};
} // namespace Ifrit::GraphicsBackend::Rhi